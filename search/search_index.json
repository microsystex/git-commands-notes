{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Git Commands Notes","text":"<p>Welcome to the Git Commands Notes documentation. This site provides comprehensive information on Git commands and branching strategies to help you manage your projects effectively.</p>"},{"location":"#contents","title":"Contents","text":""},{"location":"#git-branch-planning","title":"Git Branch Planning","text":"<p>Learn about different branching strategies and how to manage branches in a multi-phase project.</p>"},{"location":"#daily-development-routine","title":"Daily Development Routine","text":"<p>Follow the daily routines to ensure smooth development and integration.</p>"},{"location":"#removing-old-commits","title":"Removing Old Commits","text":"<p>Learn how to remove commits older than six months.</p>"},{"location":"#related-commands-summary","title":"Related Commands Summary","text":"<p>Detailed explanations of various Git commands used in this documentation.</p> <p>Feel free to explore each section to get a better understanding of Git and how to use it efficiently in your projects.</p>"},{"location":"daily-development-routine/","title":"Daily Development Routine","text":"<p>To ensure smooth development and integration, each engineer should follow these daily routines:</p>"},{"location":"daily-development-routine/#starting-new-work","title":"Starting New Work","text":"<ul> <li>Create a new branch for your bugfix or feature based on the <code>dev</code> or <code>dev-2</code> branch.</li> </ul> <pre><code>git switch dev\ngit pull origin dev\ngit switch -c feature-xxx\n</code></pre>"},{"location":"daily-development-routine/#start-of-the-day","title":"Start of the Day","text":"<ul> <li>Pull the latest changes from the <code>dev</code> or <code>dev-2</code> branch.</li> </ul> <pre><code>git switch dev\ngit pull origin dev\n</code></pre> <ul> <li>Merge your feature or bugfix branch with the latest <code>dev</code> or <code>dev-2</code> branch.</li> </ul> <pre><code>git switch feature-xxx\ngit merge dev\n</code></pre>"},{"location":"daily-development-routine/#during-development","title":"During Development","text":"<ul> <li>Commit changes frequently with clear and concise commit messages.</li> </ul> <pre><code>git add .\ngit commit -m \"Your clear and concise commit message\"\n</code></pre> <ul> <li>Push your changes to the remote repository regularly.</li> </ul> <pre><code>git push origin feature-xxx\n</code></pre>"},{"location":"daily-development-routine/#after-completing-a-bugfix-or-feature","title":"After Completing a Bugfix or Feature","text":"<ul> <li>Ensure your branch is up-to-date with the latest <code>dev</code> or <code>dev-2</code> branch.</li> </ul> <pre><code>git switch dev\ngit pull origin dev\ngit switch feature-xxx\ngit merge dev\n</code></pre> <ul> <li>Create a pull request for code review if your feature or bugfix is complete.</li> <li>After the pull request is merged, delete the feature or bugfix branch.</li> </ul> <pre><code>git branch -d feature-xxx\ngit push origin --delete feature-xxx\n</code></pre>"},{"location":"daily-development-routine/#related-commands-summary","title":"Related Commands Summary","text":"<p>For detailed explanations of related commands, please refer to the Related Commands Summary page.</p> <ul> <li><code>git switch &lt;branch-name&gt;</code>: Switch to an existing branch</li> <li><code>git pull origin &lt;branch-name&gt;</code>: Pull the latest changes from a remote branch</li> <li><code>git merge &lt;source-branch&gt;</code>: Merge changes from one branch to another</li> <li><code>git add .</code>: Stage changes for commit</li> <li><code>git commit -m \"message\"</code>: Commit changes with a message</li> <li><code>git push origin &lt;branch-name&gt;</code>: Push changes to a remote branch</li> <li><code>git branch -d &lt;branch-name&gt;</code>: Delete a local branch</li> <li><code>git push origin --delete &lt;branch-name&gt;</code>: Delete a remote branch</li> </ul>"},{"location":"git-branch-planning/","title":"Git Branch Planning","text":""},{"location":"git-branch-planning/#scenario","title":"Scenario","text":"<p>In a project with multiple development phases and several team members, it is essential to maintain separate branches for different environments. This ensures that the first phase can be maintained while the second phase is being developed.</p>"},{"location":"git-branch-planning/#branches","title":"Branches","text":"<ul> <li>prod: Production environment code</li> <li>stage: Pre-release environment, ready for deployment</li> <li>uat: User Acceptance Testing environment</li> <li>dev: Development environment</li> </ul>"},{"location":"git-branch-planning/#second-phase-development","title":"Second Phase Development","text":"<p>After the first phase goes live, the following branches are added to maintain the first phase and simultaneously develop the second phase features:</p> <ul> <li>stage-2</li> <li>uat-2</li> <li>dev-2</li> </ul>"},{"location":"git-branch-planning/#merging-changes","title":"Merging Changes","text":"<p>When bugs are fixed or new features are added in the first phase, the changes need to be merged from the <code>prod</code> branch to the <code>dev-2</code> branch of the second phase to ensure consistency and continuity in development.</p>"},{"location":"git-branch-planning/#branching-strategy-for-team-members","title":"Branching Strategy for Team Members","text":"<p>Each team member should create a separate branch for modifying bugs or adding new features. The naming convention for these branches should be as follows:</p> <ul> <li>feature-xxx: For new features</li> <li>bugfix-xxx: For bug fixes</li> </ul>"},{"location":"git-branch-planning/#example-commands","title":"Example Commands","text":"<p>To create a new feature branch:</p> <pre><code>git switch -c feature-xxx\n</code></pre> <p>To create a new bugfix branch:</p> <pre><code>git switch -c bugfix-xxx\n</code></pre> <p>Once the work is completed on these branches, they should be merged into the <code>dev</code> or <code>dev-2</code> branch, depending on the development phase.</p> <p>To merge a feature or bugfix branch into <code>dev</code>:</p> <pre><code>git switch dev\ngit pull origin dev\ngit merge feature-xxx\ngit push origin dev\n</code></pre>"},{"location":"git-branch-planning/#daily-development-routine","title":"Daily Development Routine","text":"<p>For detailed daily development routines, please refer to the Daily Development Routine page.</p>"},{"location":"git-branch-planning/#related-commands-summary","title":"Related Commands Summary","text":"<p>For detailed explanations of related commands, please refer to the Related Commands Summary page.</p> <ul> <li><code>git switch -c &lt;branch-name&gt;</code>: Create a new branch</li> <li><code>git switch &lt;branch-name&gt;</code>: Switch to an existing branch</li> <li><code>git pull origin &lt;branch-name&gt;</code>: Pull the latest changes from a remote branch</li> <li><code>git merge &lt;source-branch&gt;</code>: Merge changes from one branch to another</li> <li><code>git push origin &lt;branch-name&gt;</code>: Push changes to a remote branch</li> <li><code>git branch -d &lt;branch-name&gt;</code>: Delete a local branch</li> <li><code>git push origin --delete &lt;branch-name&gt;</code>: Delete a remote branch</li> </ul>"},{"location":"related-commands-summary/","title":"Related Commands Summary","text":""},{"location":"related-commands-summary/#command-explanations","title":"Command Explanations","text":""},{"location":"related-commands-summary/#git-switch","title":"<code>git switch</code>","text":"<p><code>git switch -c &lt;branch-name&gt;</code>: Create a new branch</p> <ul> <li>This command creates a new branch and switches to it immediately.</li> <li>Example:</li> </ul> <pre><code>git switch -c feature-xyz\n</code></pre> <p><code>git switch &lt;branch-name&gt;</code>: Switch to an existing branch</p> <ul> <li>This command switches to an existing branch.</li> <li>Example:</li> </ul> <pre><code>git switch dev\n</code></pre>"},{"location":"related-commands-summary/#git-pull","title":"<code>git pull</code>","text":"<p><code>git pull origin &lt;branch-name&gt;</code>: Pull the latest changes from a remote branch</p> <ul> <li>This command fetches and integrates changes from the specified remote branch.</li> <li>Example:</li> </ul> <pre><code>git pull origin dev\n</code></pre>"},{"location":"related-commands-summary/#git-merge","title":"<code>git merge</code>","text":"<p><code>git merge &lt;source-branch&gt;</code>: Merge changes from one branch to another</p> <ul> <li>This command merges changes from the source branch into the current branch.</li> <li>Example:</li> </ul> <pre><code>git merge feature-xyz\n</code></pre>"},{"location":"related-commands-summary/#git-branch","title":"<code>git branch</code>","text":"<p><code>git branch -d &lt;branch-name&gt;</code>: Delete a local branch</p> <ul> <li>This command deletes the specified local branch.</li> <li>Example:</li> </ul> <pre><code>git branch -d feature-xyz\n</code></pre>"},{"location":"related-commands-summary/#git-push","title":"<code>git push</code>","text":"<p><code>git push origin --delete &lt;branch-name&gt;</code>: Delete a remote branch</p> <ul> <li>This command deletes the specified branch from the remote repository.</li> <li>Example:</li> </ul> <pre><code>git push origin --delete feature-xyz\n</code></pre> <p><code>git push origin &lt;branch-name&gt;</code>: Push changes to a remote branch</p> <ul> <li>This command pushes local changes to the specified remote branch.</li> <li>Example:</li> </ul> <pre><code>git push origin feature-xyz\n</code></pre>"},{"location":"related-commands-summary/#git-reset","title":"<code>git reset</code>","text":"<p><code>git reset --soft &lt;root_commit_hash&gt;</code>: Reset the current branch to the root commit, keeping changes staged</p> <ul> <li>This command resets the current branch to the specified root commit, keeping changes staged.</li> <li>Example:</li> </ul> <pre><code>git reset --soft root-commit-hash\n</code></pre>"},{"location":"related-commands-summary/#git-commit","title":"<code>git commit</code>","text":"<p><code>git commit --amend -m \"\u5c07\u6b77\u53f2\u8cc7\u6599\u79fb\u9664\uff0c\u6240\u6e1b\u81f3\u55ae\u4e00\u63d0\u4ea4\"</code>: Amend the current commit with a new message</p> <ul> <li>This command amends the current commit with a new message.</li> <li>Example:</li> </ul> <pre><code>git commit --amend -m \"\u5c07\u6b77\u53f2\u8cc7\u6599\u79fb\u9664\uff0c\u6240\u6e1b\u81f3\u55ae\u4e00\u63d0\u4ea4\"\n</code></pre>"},{"location":"related-commands-summary/#git-rebase","title":"<code>git rebase</code>","text":"<p><code>git rebase &lt;specific_commit_hash&gt; master --onto temp-branch</code>: Rebase the master branch onto a temporary branch starting from a specific commit</p> <ul> <li>This command rebases the master branch onto a temporary branch starting from a specific commit.</li> <li>Example:</li> </ul> <pre><code>git rebase specific-commit-hash master --onto temp-branch\n</code></pre>"},{"location":"related-commands-summary/#git-add","title":"<code>git add</code>","text":"<p><code>git add .</code>: Stage changes for commit</p> <ul> <li>This command stages all changes in the current directory for the next commit.</li> <li>Example:</li> </ul> <pre><code>git add .\n</code></pre>"},{"location":"removing-old-commits/","title":"Removing Old Commits","text":"<p>When a repository has too many commits over a long period, you may need to remove commits older than six months. The following commands can help you achieve this:</p>"},{"location":"removing-old-commits/#commands","title":"Commands","text":""},{"location":"removing-old-commits/#create-a-new-branch","title":"Create a new branch","text":"<ul> <li>Example:</li> </ul> <pre><code>git switch -c new-branch-name specific-commit-hash\n</code></pre>"},{"location":"removing-old-commits/#reset-to-root-commit","title":"Reset to root commit","text":"<ul> <li>Example:</li> </ul> <pre><code>git reset --soft root-commit-hash\n</code></pre>"},{"location":"removing-old-commits/#amend-commit-message","title":"Amend commit message","text":"<ul> <li>Example:</li> </ul> <pre><code>git commit --amend -m \"Remove historical data, reduced to a single commit\"\n</code></pre>"},{"location":"removing-old-commits/#rebase-onto-temp-branch","title":"Rebase onto temp branch","text":"<ul> <li>Example:</li> </ul> <pre><code>git rebase specific-commit-hash main --onto temp-branch\n</code></pre>"},{"location":"removing-old-commits/#delete-temp-branch","title":"Delete temp branch","text":"<ul> <li>Example:</li> </ul> <pre><code>git branch -d temp-branch\n</code></pre>"},{"location":"removing-old-commits/#force-push-changes","title":"Force push changes","text":"<ul> <li>Example:</li> </ul> <pre><code>git push --force\n</code></pre>"},{"location":"removing-old-commits/#related-commands-summary","title":"Related Commands Summary","text":"<p>For detailed explanations of related commands, please refer to the Related Commands Summary page.</p> <ul> <li><code>git switch -c &lt;new_branch_name&gt; &lt;specific_commit_hash&gt;</code>: Create a new branch from a specific commit</li> <li><code>git reset --soft &lt;root_commit_hash&gt;</code>: Reset the current branch to the root commit, keeping changes staged</li> <li><code>git commit --amend -m \"Remove historical data, reduced to a single commit\"</code>: Amend the current commit with a new message</li> <li><code>git rebase &lt;specific_commit_hash&gt; main --onto temp-branch</code>: Rebase the main branch onto a temporary branch starting from a specific commit</li> <li><code>git branch -d temp-branch</code>: Delete the temporary branch</li> <li><code>git push --force</code>: Force push the changes to the remote repository</li> </ul>"}]}