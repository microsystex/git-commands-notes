{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Git Commands Notes","text":"<p>This document provides notes on various Git commands, organized by scenarios encountered during past project development. It includes a subset of Git commands relevant to these scenarios, along with instructions for setting up and deploying documentation using MkDocs.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Git Branch Planning</li> <li>Related Commands Summary</li> </ul>"},{"location":"git-branch-planning/","title":"Git Branch Planning","text":""},{"location":"git-branch-planning/#scenario","title":"Scenario","text":"<p>In a project with multiple development phases and several team members, it is essential to maintain separate branches for different environments. This ensures that the first phase can be maintained while the second phase is being developed.</p>"},{"location":"git-branch-planning/#branches","title":"Branches","text":"<ul> <li>prod: Production environment code</li> <li>stage: Pre-release environment, ready for deployment</li> <li>uat: User Acceptance Testing environment</li> <li>dev: Development environment</li> </ul>"},{"location":"git-branch-planning/#second-phase-development","title":"Second Phase Development","text":"<p>After the first phase goes live, the following branches are added to maintain the first phase and simultaneously develop the second phase features:</p> <ul> <li>stage-2</li> <li>uat-2</li> <li>dev-2</li> </ul>"},{"location":"git-branch-planning/#merging-changes","title":"Merging Changes","text":"<p>When bugs are fixed or new features are added in the first phase, the changes need to be merged from the <code>prod</code> branch to the <code>dev-2</code> branch of the second phase to ensure consistency and continuity in development.</p>"},{"location":"git-branch-planning/#branching-strategy-for-team-members","title":"Branching Strategy for Team Members","text":"<p>Each team member should create a separate branch for modifying bugs or adding new features. The naming convention for these branches should be as follows:</p> <ul> <li>feature-xxx: For new features</li> <li>bugfix-xxx: For bug fixes</li> </ul>"},{"location":"git-branch-planning/#example-commands","title":"Example Commands","text":"<p>To create a new feature branch:</p> <pre><code>git switch -c feature-xxx\n</code></pre> <p>To create a new bugfix branch:</p> <pre><code>git switch -c bugfix-xxx\n</code></pre> <p>Once the work is completed on these branches, they should be merged into the <code>dev</code> or <code>dev-2</code> branch, depending on the development phase.</p> <p>To merge a feature or bugfix branch into <code>dev</code>:</p> <pre><code>git switch dev\ngit pull origin dev\ngit merge feature-xxx\ngit push origin dev\n</code></pre>"},{"location":"git-branch-planning/#daily-development-routine","title":"Daily Development Routine","text":"<p>To ensure smooth development and integration, each engineer should follow these daily routines:</p> <ol> <li>Start of the Day:</li> <li>Pull the latest changes from the <code>dev</code> or <code>dev-2</code> branch.    <code>sh    git switch dev    git pull origin dev</code></li> <li> <p>Merge your feature or bugfix branch with the latest <code>dev</code> or <code>dev-2</code> branch.    <code>sh    git switch feature-xxx    git merge dev</code></p> </li> <li> <p>During Development:</p> </li> <li>Commit changes frequently with clear and concise commit messages.    <code>sh    git add .    git commit -m \"Your clear and concise commit message\"</code></li> <li> <p>Push your changes to the remote repository regularly.    <code>sh    git push origin feature-xxx</code></p> </li> <li> <p>After Completing a Bugfix or Feature:</p> </li> <li>Ensure your branch is up-to-date with the latest <code>dev</code> or <code>dev-2</code> branch.    <code>sh    git switch dev    git pull origin dev    git switch feature-xxx    git merge dev</code></li> <li>Create a pull request for code review if your feature or bugfix is complete.</li> <li>After the pull request is merged, delete the feature or bugfix branch.    <code>sh    git branch -d feature-xxx    git push origin --delete feature-xxx</code></li> </ol>"},{"location":"git-branch-planning/#related-commands-summary","title":"Related Commands Summary","text":"<p>For detailed explanations of related commands, please refer to the Related Commands Summary page.</p> <ul> <li><code>git switch -c &lt;branch-name&gt;</code>: Create a new branch</li> <li><code>git switch &lt;branch-name&gt;</code>: Switch to an existing branch</li> <li><code>git pull origin &lt;branch-name&gt;</code>: Pull the latest changes from a remote branch</li> <li><code>git merge &lt;source-branch&gt;</code>: Merge changes from one branch to another</li> <li><code>git branch -d &lt;branch-name&gt;</code>: Delete a local branch</li> <li><code>git push origin --delete &lt;branch-name&gt;</code>: Delete a remote branch</li> <li><code>git push origin &lt;branch-name&gt;</code>: Push changes to a remote branch</li> <li><code>gh pr create --base &lt;base-branch&gt; --head &lt;head-branch&gt; --title \"Pull Request Title\" --body \"Pull Request Description\"</code>: Create a pull request (using GitHub CLI)</li> </ul>"},{"location":"related-commands-summary/","title":"Related Commands Summary","text":""},{"location":"related-commands-summary/#command-explanations","title":"Command Explanations","text":""},{"location":"related-commands-summary/#git-switch","title":"<code>git switch</code>","text":""},{"location":"related-commands-summary/#git-switch-c-branch-name-create-a-new-branch","title":"<code>git switch -c &lt;branch-name&gt;</code>: Create a new branch","text":"<ul> <li>This command creates a new branch and switches to it immediately.</li> <li>Example: <code>git switch -c feature-xyz</code></li> </ul>"},{"location":"related-commands-summary/#git-switch-branch-name-switch-to-an-existing-branch","title":"<code>git switch &lt;branch-name&gt;</code>: Switch to an existing branch","text":"<ul> <li>This command switches to an existing branch.</li> <li>Example: <code>git switch dev</code></li> </ul>"},{"location":"related-commands-summary/#git-pull","title":"<code>git pull</code>","text":""},{"location":"related-commands-summary/#git-pull-origin-branch-name-pull-the-latest-changes-from-a-remote-branch","title":"<code>git pull origin &lt;branch-name&gt;</code>: Pull the latest changes from a remote branch","text":"<ul> <li>This command fetches and integrates changes from the specified remote branch.</li> <li>Example: <code>git pull origin dev</code></li> </ul>"},{"location":"related-commands-summary/#git-merge","title":"<code>git merge</code>","text":""},{"location":"related-commands-summary/#git-merge-source-branch-merge-changes-from-one-branch-to-another","title":"<code>git merge &lt;source-branch&gt;</code>: Merge changes from one branch to another","text":"<ul> <li>This command merges changes from the source branch into the current branch.</li> <li>Example: <code>git merge feature-xyz</code></li> </ul>"},{"location":"related-commands-summary/#git-branch","title":"<code>git branch</code>","text":""},{"location":"related-commands-summary/#git-branch-d-branch-name-delete-a-local-branch","title":"<code>git branch -d &lt;branch-name&gt;</code>: Delete a local branch","text":"<ul> <li>This command deletes the specified local branch.</li> <li>Example: <code>git branch -d feature-xyz</code></li> </ul>"},{"location":"related-commands-summary/#git-push","title":"<code>git push</code>","text":""},{"location":"related-commands-summary/#git-push-origin-delete-branch-name-delete-a-remote-branch","title":"<code>git push origin --delete &lt;branch-name&gt;</code>: Delete a remote branch","text":"<ul> <li>This command deletes the specified branch from the remote repository.</li> <li>Example: <code>git push origin --delete feature-xyz</code></li> </ul>"},{"location":"related-commands-summary/#git-push-origin-branch-name-push-changes-to-a-remote-branch","title":"<code>git push origin &lt;branch-name&gt;</code>: Push changes to a remote branch","text":"<ul> <li>This command pushes local changes to the specified remote branch.</li> <li>Example: <code>git push origin feature-xyz</code></li> </ul>"},{"location":"related-commands-summary/#gh-pr-create","title":"<code>gh pr create</code>","text":""},{"location":"related-commands-summary/#gh-pr-create-base-base-branch-head-head-branch-title-pull-request-title-body-pull-request-description-create-a-pull-request-using-github-cli","title":"<code>gh pr create --base &lt;base-branch&gt; --head &lt;head-branch&gt; --title \"Pull Request Title\" --body \"Pull Request Description\"</code>: Create a pull request (using GitHub CLI)","text":"<ul> <li>This command creates a pull request on GitHub with the specified base and head branches, title, and description.</li> <li>Example: <code>gh pr create --base main --head feature-xyz --title \"Add new feature\" --body \"This PR adds a new feature.\"</code></li> </ul>"}]}